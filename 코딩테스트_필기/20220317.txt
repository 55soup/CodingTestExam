구분중요** 
배열의
-길이 : 요소의 갯수 ***
-크기 : 차지하는 메모리양

2. 관계 연산자
-2개 값의 크기를 비교하여 판단하기 위한 연산자
->,<, >=,<=,==,!=
-연산 결과는 0(거짓), 1(참)이다.
-단독으로 사용하는 경우는 거의 없고 조건식에 이용된다.
-실행 예
printf("%d\n", 5>7); 의 결과?  =>0
printf("%d\n", 7<5); 의 결과?  =>0

★완성형, 부분수정형 문제는 80%정도 관계연산자를 고침.

º코드의 효율성
a-b==0  vs a==b
↑연산을 2번 더함.
연산을 최소화 할 수록 좋은 코드다.!

º결과의 중요한 변화
int cnt=0;
for(int i=0; i<5; i++){
  cnt += 1;
}
printf("%d\n",cnt);
i  0 1 2 3 4 5
==================
int cnt=0;
for(int i=0; i<=5; i++){
  cnt+=1;
}
printf("%d\n",cnt);
i  0 1 2 3 4 5 6
<, <=!!

초기화 => 조건판단 => 참 처리 => 증가 => 조건판단 => 참 처리 => 증가..........=> 조건판단 => 거짓=>종료


3. 논리연산자
-조건식을 여러 개 조합
-논리 연산의 결과로 정수 1,0을 반환
-c언어는 논리 상태를 의미하는 자료형이 없다
-stdbool.h에 #define true 1, #define false 0로 선언되어 있다.!!!  (cos pro2급 예제로 나오지는 않지만 알아두기)
-논리적 상태가 0이면 거짓, 0이 아닌 모든 값은 참으로 해석
int a = 5;
int b = 7;
printf("%d && %d=%d\n", a&&b);
printf("%d || %d=%d\n", a||b);

& : 두 조건다 확인       && : 처음 조건이 거짓이면 거짓.
|   : 두 조건 다 확인      || : 처음 조건이 참이면 참.

-조건을 작성하는 순서에 따라 성능 변화 => !!!!확률이 높은 조건을 맨 처음 기술하면 수행속도가 빨라짐.
-A조건이 참인 경우
  1. A && B => B까지 확인
  2. A || B => B는 확인하지 않음
-A조건이 거짓인 경우
  1. A && B => A까지 확인
  2. A || B => B까지 확인

주의할 사항 : ex "0부터 100까지 사이"의 범위를 표현하고자 할 때
  x=150
  if(0 <= x || x < 100)  => T  (0<=150이 참으로 판단되어, 참이됨)
  if(0 <= x && x<100)

  기계와 대화하기 위해서 말과 생각의 습관을 정확하게 하도록 하자!!
  => 알고리즘의 효율성, 메모리의 최적화, 속도 향상, 안정성 등이 확보되어야 한다.

4.조건식의 결과 판단하기

if문에서의 조건식:
  조건이 생략되는 경우
     ★조건이 생략되는 경우
	int a=10;
	if(a){.........}  => a가 0이 아니면 참, a가 0이면 거짓

  제어구간 => 중괄호의 중요성
	int a = 10;
	if(a == 10){
	   printf("Hi");
	   printf("Hello");
`	}

	int a = 10;
	if(a == 10)
	  printf("Hi");    //c언어는 중괄호를 생략하면 그 조건에 부합하는 바로 밑 한 문장만 실행함.
	  printf("Hello");


º 연산 효율성 이슈
int r;
if(r % 4 == 0){
  printf("r을 4로 나눈 나머지는 0이다");
}else{
  printf("r을 4로 나눈 나머지가 0이 아니다");
}

★★★★★
int r;
if(r % 4){ //★조건(r%4)는 r%4의 결과가 0이 아니면 참이라는 의미이다.
  printf("r을 4로 나눈 나머지가 0이 아니다");
}else{
  printf("r을 4로 나눈 나머지는 0이다");  
}
- 위의 두 코드는 같은 결과가 도출된다.
- 좌측의 경우 '%'와 '=='연산 두 개를 실행 해야 하며
  우측의 경우 %연산 한 개만 실행한다.

★조건 (r%4)는 r%4의 결과가 0이 아니면 참이라는 의미이다.

º 가독성이슈
- '임의의 값 r이 홀수 이면서 3의 배수'일 때

º 반복문,에서의 조건식
while for문의 사용 (do whilexx)


배열
-배열은 반드시 크기가 *고정*되어 변경하지 않는다.
실행 시 크기가 고정되어 임의로 삭제, 추가 등이 되지 않는
배열을 정적배열이라고 하며 [ ]로 표시
malloc**** -> 동적 할당

코딩테스트 구성
10문제 = 2 : 완성형(30분),  8 : 부분완성, 부분수정형(20분)
문항당*100=1000점   => 600점 이상
